"""
Analyse des Caract√©ristiques Sismiques

Ce module fournit une analyse compl√®te des caract√©ristiques sismiques incluant :
- Distribution des magnitudes avec cat√©gorisation
- Distribution des profondeurs et impact sur les d√©g√¢ts
- Relations entre magnitude et profondeur
- Calcul et analyse du potentiel destructeur
- Analyse de l'√©nergie lib√©r√©e
- Tests statistiques avanc√©s

Converti depuis Jupyter notebook vers Streamlit.
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from datetime import datetime
import warnings
import sys
import os

# Supprimer les avertissements
warnings.filterwarnings('ignore')

# Ajouter utils au chemin pour le chargement des donn√©es
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'utils'))

# Configuration matplotlib
plt.style.use('default')
sns.set_palette("husl")

def apply_custom_css():
    """Appliquer le CSS personnalis√© pour l'analyse des caract√©ristiques"""
    st.markdown("""
    <style>
    .characteristics-header {
        background: linear-gradient(135deg, #e74c3c 0%, #8e44ad 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 1.5rem;
        text-align: center;
    }
    
    .intro-section {
        background-color: #d4edda;
        padding: 20px;
        border-radius: 15px;
        margin: 15px 0;
        border-left: 4px solid #28a745;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .intro-text {
        color: #155724;
        font-size: 16px;
        line-height: 1.6;
        margin: 0;
        text-align: center;
    }
    
    .analysis-section {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
        border-left: 4px solid #e74c3c;
    }
    
    .stats-container {
        background-color: #e8f5e8;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        border-left: 4px solid #2ecc71;
        color: #155724;
        font-weight: 500;
    }
    
    .stats-container h4 {
        color: #155724;
        margin-bottom: 10px;
        font-weight: bold;
    }
    
    .stats-container p {
        color: #155724;
        margin: 5px 0;
        font-weight: 500;
    }
    
    .energy-metric {
        background-color: #fff3cd;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        border-left: 4px solid #ffc107;
        color: #856404;
        font-weight: 500;
    }
    
    .energy-metric h4 {
        color: #856404;
        margin-bottom: 10px;
        font-weight: bold;
    }
    
    .energy-metric p {
        color: #856404;
        margin: 5px 0;
        font-weight: 500;
    }
    
    .danger-alert {
        background-color: #f8d7da;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        border-left: 4px solid #dc3545;
        color: #721c24;
        font-weight: 500;
    }
    
    .danger-alert h4 {
        color: #721c24;
        margin-bottom: 10px;
        font-weight: bold;
    }
    
    .danger-alert p {
        color: #721c24;
        margin: 5px 0;
        font-weight: 500;
    }
    
    .metric-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin: 1rem 0;
    }
    </style>
    """, unsafe_allow_html=True)

def show_analyse_caracteristiques():
    """Fonction principale pour afficher l'analyse des caract√©ristiques"""
    
    # Appliquer le style personnalis√©
    apply_custom_css()
    
    # En-t√™te
    st.markdown("""
    <div class="characteristics-header">
        <h1>üî¨ Analyse des Caract√©ristiques Sismiques</h1>
        <p>Analyse approfondie des propri√©t√©s physiques des s√©ismes</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Section d'introduction
    st.markdown("""
    <div class="intro-section">
        <p style="text-align: center; font-weight: bold; line-height: 1.8; color: #155724; font-size: 16px; margin: 0;">
            ‚úÖ <strong>15407 s√©ismes r√©els charg√©s</strong><br><br>
            Ce module permet d'analyser les <strong>caract√©ristiques physiques</strong> des s√©ismes. 
            Explorez la <strong>distribution des magnitudes</strong>, <strong>profondeurs</strong>, 
            le <strong>potentiel destructeur</strong> et l'<strong>√©nergie lib√©r√©e</strong>. 
            üìä S√©lectionnez un type d'analyse ci-dessous pour commencer votre exploration.
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Obtenir les donn√©es filtr√©es depuis l'√©tat de session
    if 'filtered_df' not in st.session_state:
        st.error("‚ùå Donn√©es non disponibles. Veuillez retourner √† la page d'accueil.")
        return
    
    df = st.session_state.filtered_df
    
    if len(df) == 0:
        st.warning("‚ö†Ô∏è Aucune donn√©e ne correspond aux filtres s√©lectionn√©s.")
        return
    
    # Pr√©parer les donn√©es avec les caract√©ristiques calcul√©es
    df = prepare_seismic_characteristics(df)
    
    # Section de s√©lection du type d'analyse
    st.subheader("üîç S√©lection du Type d'Analyse")
    
    analysis_type = st.selectbox(
        "Choisissez le type d'analyse des caract√©ristiques :",
        [
            "Distribution des magnitudes",
            "Distribution des profondeurs", 
            "Relation magnitude/profondeur",
            "Potentiel destructeur",
            "√ânergie lib√©r√©e"
        ],
        index=0,
        help="S√©lectionnez le type d'analyse physique √† effectuer"
    )
    
    # Filtres avanc√©s sp√©cifiques aux caract√©ristiques
    show_advanced_filters(df)
    
    # Afficher les m√©triques cl√©s
    show_key_metrics(df)
    
    # Ex√©cuter l'analyse s√©lectionn√©e
    if analysis_type == "Distribution des magnitudes":
        analyser_distribution_magnitudes(df)
    elif analysis_type == "Distribution des profondeurs":
        analyser_distribution_profondeurs(df)
    elif analysis_type == "Relation magnitude/profondeur":
        analyser_relation_magnitude_profondeur(df)
    elif analysis_type == "Potentiel destructeur":
        analyser_potentiel_destructeur(df)
    elif analysis_type == "√ânergie lib√©r√©e":
        analyser_energie(df)

def prepare_seismic_characteristics(df):
    """Pr√©parer les caract√©ristiques sismiques calcul√©es"""
    
    df = df.copy()
    
    # Correction des profondeurs n√©gatives
    if (df['Profondeur'] < 0).any():
        st.warning(f"‚ö†Ô∏è {(df['Profondeur'] < 0).sum()} valeurs de profondeur n√©gatives d√©tect√©es. Application de la valeur absolue.")
        df['Profondeur'] = df['Profondeur'].abs()
    
    # Cat√©gorisation des magnitudes
    def categorize_magnitude(mag):
        if 0 <= mag < 2.5:
            return 'Micro'
        elif 2.5 <= mag < 4.0:
            return 'Faible'
        elif 4.0 <= mag < 5.0:
            return 'L√©ger'
        elif 5.0 <= mag < 6.0:
            return 'Mod√©r√©'
        elif 6.0 <= mag < 7.0:
            return 'Fort'
        elif 7.0 <= mag < 8.0:
            return 'Majeur'
        elif mag >= 8.0:
            return 'Grand'
        return 'Inconnu'
    
    df['Magnitude_Categorie'] = df['Magnitude'].apply(categorize_magnitude)
    
    # Cat√©gorisation des profondeurs
    def categorize_depth(depth):
        if 0 <= depth < 70:
            return 'Peu profond'
        elif 70 <= depth < 300:
            return 'Interm√©diaire'
        elif depth >= 300:
            return 'Profond'
        return 'Inconnu'
    
    df['Profondeur_Categorie'] = df['Profondeur'].apply(categorize_depth)
    
    # Calcul de l'√©nergie lib√©r√©e (formule: E = 10^(1.5*M+4.8))
    df['Energie'] = 10**(1.5 * df['Magnitude'] + 4.8)
    
    # Calcul du potentiel destructeur 
    # Formule: Magnitude * (1 + 70/profondeur)
    # Plus la profondeur est faible, plus le potentiel est √©lev√©
    df['Potentiel_Destructeur'] = df['Magnitude'] * (1 + 70/df['Profondeur'])
    
    # Cat√©gorisation du potentiel destructeur
    def categorize_potentiel(pot):
        if 0 <= pot < 3:
            return 'Tr√®s faible'
        elif 3 <= pot < 6:
            return 'Faible'
        elif 6 <= pot < 10:
            return 'Mod√©r√©'
        elif 10 <= pot < 15:
            return '√âlev√©'
        elif pot >= 15:
            return 'Tr√®s √©lev√©'
        return 'Inconnu'
    
    df['Potentiel_Categorie'] = df['Potentiel_Destructeur'].apply(categorize_potentiel)
    
    return df

def show_advanced_filters(df):
    """Afficher les filtres avanc√©s pour l'analyse des caract√©ristiques"""
    
    with st.expander("üîß Filtres Avanc√©s par Cat√©gories", expanded=False):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # Filtre par cat√©gorie de magnitude
            mag_categories = ['Micro', 'Faible', 'L√©ger', 'Mod√©r√©', 'Fort', 'Majeur', 'Grand']
            available_mag_cats = [cat for cat in mag_categories if cat in df['Magnitude_Categorie'].unique()]
            
            selected_mag_cats = st.multiselect(
                "Cat√©gories de magnitude",
                available_mag_cats,
                default=available_mag_cats,
                help="Filtrer par niveau de magnitude"
            )
        
        with col2:
            # Filtre par cat√©gorie de profondeur
            depth_categories = ['Peu profond', 'Interm√©diaire', 'Profond']
            available_depth_cats = [cat for cat in depth_categories if cat in df['Profondeur_Categorie'].unique()]
            
            selected_depth_cats = st.multiselect(
                "Cat√©gories de profondeur",
                available_depth_cats,
                default=available_depth_cats,
                help="Filtrer par niveau de profondeur"
            )
        
        with col3:
            # Filtre par potentiel destructeur
            pot_categories = ['Tr√®s faible', 'Faible', 'Mod√©r√©', '√âlev√©', 'Tr√®s √©lev√©']
            available_pot_cats = [cat for cat in pot_categories if cat in df['Potentiel_Categorie'].unique()]
            
            selected_pot_cats = st.multiselect(
                "Potentiel destructeur",
                available_pot_cats,
                default=available_pot_cats,
                help="Filtrer par potentiel de destruction"
            )
        
        # Appliquer les filtres avanc√©s
        if selected_mag_cats:
            df = df[df['Magnitude_Categorie'].isin(selected_mag_cats)]
        if selected_depth_cats:
            df = df[df['Profondeur_Categorie'].isin(selected_depth_cats)]
        if selected_pot_cats:
            df = df[df['Potentiel_Categorie'].isin(selected_pot_cats)]
        
        # Mettre √† jour les donn√©es filtr√©es
        st.session_state.filtered_df = df
        
        if len(df) == 0:
            st.warning("‚ö†Ô∏è Aucune donn√©e ne correspond aux filtres avanc√©s.")

def show_key_metrics(df):
    """Afficher les m√©triques cl√©s des caract√©ristiques sismiques"""
    
    st.subheader("üìä M√©triques Cl√©s")
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("Magnitude moyenne", f"{df['Magnitude'].mean():.2f}")
        
    with col2:
        st.metric("Profondeur moyenne", f"{df['Profondeur'].mean():.1f} km")
        
    with col3:
        √©nergie_totale = df['Energie'].sum()
        st.metric("√ânergie totale", f"{√©nergie_totale:.2e} J")
        
    with col4:
        potentiel_max = df['Potentiel_Destructeur'].max()
        st.metric("Potentiel max", f"{potentiel_max:.1f}")
        
    with col5:
        s√©ismes_dangereux = len(df[df['Potentiel_Destructeur'] > 10])
        st.metric("S√©ismes √©lev√©s", s√©ismes_dangereux)

def analyser_distribution_magnitudes(df_filtered):
    """Analyser la distribution des magnitudes"""
    
    st.subheader("üìä Analyse des Magnitudes")
    
    if len(df_filtered) == 0:
        st.warning("Aucune donn√©e pour l'analyse des magnitudes.")
        return
    
    # 1. Distribution globale
    st.markdown("#### üìà Distribution globale des magnitudes")
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
    
    # Histogramme avec courbe de densit√©
    ax1.hist(df_filtered['Magnitude'], bins=30, alpha=0.7, color='skyblue', edgecolor='black', density=True)
    
    # Ajouter une courbe de densit√©
    from scipy.stats import gaussian_kde
    kde = gaussian_kde(df_filtered['Magnitude'])
    x_range = np.linspace(df_filtered['Magnitude'].min(), df_filtered['Magnitude'].max(), 100)
    ax1.plot(x_range, kde(x_range), 'r-', linewidth=2, label='Densit√© estim√©e')
    
    ax1.axvline(df_filtered['Magnitude'].mean(), color='red', linestyle='--', 
               label=f'Moyenne: {df_filtered["Magnitude"].mean():.2f}')
    ax1.axvline(df_filtered['Magnitude'].median(), color='green', linestyle='--', 
               label=f'M√©diane: {df_filtered["Magnitude"].median():.2f}')
    
    ax1.set_title('Distribution des magnitudes')
    ax1.set_xlabel('Magnitude')
    ax1.set_ylabel('Densit√©')
    ax1.legend()
    ax1.grid(alpha=0.3)
    
    # Box plot
    ax2.boxplot(df_filtered['Magnitude'], vert=True, patch_artist=True,
                boxprops=dict(facecolor='lightblue', alpha=0.7))
    ax2.set_title('Box plot des magnitudes')
    ax2.set_ylabel('Magnitude')
    ax2.grid(alpha=0.3)
    
    plt.tight_layout()
    st.pyplot(fig)
    plt.close()
    
    # 2. Distribution par cat√©gorie
    st.markdown("#### üè∑Ô∏è Distribution par cat√©gorie")
    
    order = ['Micro', 'Faible', 'L√©ger', 'Mod√©r√©', 'Fort', 'Majeur', 'Grand']
    order = [cat for cat in order if cat in df_filtered['Magnitude_Categorie'].unique()]
    
    mag_counts = df_filtered['Magnitude_Categorie'].value_counts().reindex(order)
    
    fig, ax = plt.subplots(figsize=(12, 6))
    colors = plt.cm.YlOrRd(np.linspace(0.3, 0.9, len(order)))
    bars = ax.bar(order, mag_counts.values, color=colors, alpha=0.8, edgecolor='black')
    
    # Ajouter les valeurs et pourcentages
    total = len(df_filtered)
    for i, (bar, count) in enumerate(zip(bars, mag_counts.values)):
        percentage = count / total * 100
        ax.text(bar.get_x() + bar.get_width()/2., bar.get_height() + max(mag_counts.values) * 0.01,
               f'{count}\n({percentage:.1f}%)', ha='center', va='bottom', fontweight='bold')
    
    ax.set_title('Nombre de s√©ismes par cat√©gorie de magnitude')
    ax.set_xlabel('Cat√©gorie de magnitude')
    ax.set_ylabel('Nombre de s√©ismes')
    ax.tick_params(axis='x', rotation=45)
    ax.grid(alpha=0.3)
    
    plt.tight_layout()
    st.pyplot(fig)
    plt.close()
    
    # 3. Statistiques d√©taill√©es
    st.markdown("#### üìã Statistiques d√©taill√©es")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="stats-container">
            <h4>üìä Statistiques descriptives</h4>
        </div>
        """, unsafe_allow_html=True)
        
        stats_data = {
            "Statistique": ["Nombre total", "Minimum", "Maximum", "Moyenne", "M√©diane", "√âcart-type", "Skewness", "Kurtosis"],
            "Valeur": [
                len(df_filtered),
                f"{df_filtered['Magnitude'].min():.2f}",
                f"{df_filtered['Magnitude'].max():.2f}",
                f"{df_filtered['Magnitude'].mean():.2f}",
                f"{df_filtered['Magnitude'].median():.2f}",
                f"{df_filtered['Magnitude'].std():.2f}",
                f"{stats.skew(df_filtered['Magnitude']):.2f}",
                f"{stats.kurtosis(df_filtered['Magnitude']):.2f}"
            ]
        }
        st.dataframe(pd.DataFrame(stats_data), hide_index=True)
    
    with col2:
        st.markdown("""
        <div class="stats-container">
            <h4>üè∑Ô∏è R√©partition par cat√©gorie</h4>
        </div>
        """, unsafe_allow_html=True)
        
        category_data = []
        for category in order:
            count = mag_counts[category] if category in mag_counts.index else 0
            percentage = count / total * 100 if total > 0 else 0
            category_data.append({
                "Cat√©gorie": category,
                "Nombre": count,
                "Pourcentage": f"{percentage:.1f}%"
            })
        
        st.dataframe(pd.DataFrame(category_data), hide_index=True)

def analyser_distribution_profondeurs(df_filtered):
    """Analyser la distribution des profondeurs"""
    
    st.subheader("üï≥Ô∏è Analyse des Profondeurs")
    
    if len(df_filtered) == 0:
        st.warning("Aucune donn√©e pour l'analyse des profondeurs.")
        return
    
    # 1. Distribution globale
    st.markdown("#### üìà Distribution globale des profondeurs")
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
    
    # Histogramme avec courbe de densit√©
    ax1.hist(df_filtered['Profondeur'], bins=30, alpha=0.7, color='lightcoral', edgecolor='black', density=True)
    
    # Ajouter une courbe de densit√©
    from scipy.stats import gaussian_kde
    kde = gaussian_kde(df_filtered['Profondeur'])
    x_range = np.linspace(df_filtered['Profondeur'].min(), df_filtered['Profondeur'].max(), 100)
    ax1.plot(x_range, kde(x_range), 'darkred', linewidth=2, label='Densit√© estim√©e')
    
    ax1.axvline(df_filtered['Profondeur'].mean(), color='red', linestyle='--', 
               label=f'Moyenne: {df_filtered["Profondeur"].mean():.1f} km')
    ax1.axvline(df_filtered['Profondeur'].median(), color='green', linestyle='--', 
               label=f'M√©diane: {df_filtered["Profondeur"].median():.1f} km')
    
    ax1.set_title('Distribution des profondeurs')
    ax1.set_xlabel('Profondeur (km)')
    ax1.set_ylabel('Densit√©')
    ax1.legend()
    ax1.grid(alpha=0.3)
    
    # √âchelle logarithmique pour mieux voir la distribution
    ax2.hist(df_filtered['Profondeur'], bins=30, alpha=0.7, color='lightcoral', edgecolor='black')
    ax2.set_yscale('log')
    ax2.set_title('Distribution des profondeurs (√©chelle log)')
    ax2.set_xlabel('Profondeur (km)')
    ax2.set_ylabel('Nombre de s√©ismes (log)')
    ax2.grid(alpha=0.3)
    
    plt.tight_layout()
    st.pyplot(fig)
    plt.close()
    
    # 2. Distribution par cat√©gorie
    st.markdown("#### üè∑Ô∏è Distribution par cat√©gorie de profondeur")
    
    order = ['Peu profond', 'Interm√©diaire', 'Profond']
    order = [cat for cat in order if cat in df_filtered['Profondeur_Categorie'].unique()]
    
    depth_counts = df_filtered['Profondeur_Categorie'].value_counts().reindex(order)
    
    fig, ax = plt.subplots(figsize=(10, 6))
    colors = ['lightblue', 'steelblue', 'darkblue'][:len(order)]
    bars = ax.bar(order, depth_counts.values, color=colors, alpha=0.8, edgecolor='black')
    
    # Ajouter les valeurs et pourcentages
    total = len(df_filtered)
    for i, (bar, count) in enumerate(zip(bars, depth_counts.values)):
        percentage = count / total * 100
        ax.text(bar.get_x() + bar.get_width()/2., bar.get_height() + max(depth_counts.values) * 0.01,
               f'{count}\n({percentage:.1f}%)', ha='center', va='bottom', fontweight='bold')
    
    ax.set_title('Nombre de s√©ismes par cat√©gorie de profondeur')
    ax.set_xlabel('Cat√©gorie de profondeur')
    ax.set_ylabel('Nombre de s√©ismes')
    ax.grid(alpha=0.3)
    
    plt.tight_layout()
    st.pyplot(fig)
    plt.close()
    
    # 3. Impact de la profondeur sur les d√©g√¢ts potentiels
    st.markdown("#### ‚ö†Ô∏è Impact de la profondeur sur les d√©g√¢ts")
    
    st.markdown("""
    <div class="danger-alert">
        <h4>üö® Relation profondeur-d√©g√¢ts</h4>
        <p><strong>S√©ismes peu profonds (< 70 km) :</strong> Plus destructeurs en surface</p>
        <p><strong>S√©ismes interm√©diaires (70-300 km) :</strong> Impact mod√©r√©</p>
        <p><strong>S√©ismes profonds (> 300 km) :</strong> Moins ressentis en surface</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Analyse par cat√©gorie avec magnitude moyenne
    fig, ax = plt.subplots(figsize=(12, 6))
    
    avg_magnitude_by_depth = df_filtered.groupby('Profondeur_Categorie')['Magnitude'].mean().reindex(order)
    
    bars = ax.bar(order, avg_magnitude_by_depth.values, color=colors, alpha=0.8, edgecolor='black')
    
    for i, (bar, mag) in enumerate(zip(bars, avg_magnitude_by_depth.values)):
        ax.text(bar.get_x() + bar.get_width()/2., bar.get_height() + 0.05,
               f'{mag:.2f}', ha='center', va='bottom', fontweight='bold')
    
    ax.set_title('Magnitude moyenne par cat√©gorie de profondeur')
    ax.set_xlabel('Cat√©gorie de profondeur')
    ax.set_ylabel('Magnitude moyenne')
    ax.grid(alpha=0.3)
    
    plt.tight_layout()
    st.pyplot(fig)
    plt.close()

def analyser_relation_magnitude_profondeur(df_filtered):
    """Analyser la relation entre magnitude et profondeur"""
    
    st.subheader("üîó Relation Magnitude-Profondeur")
    
    if len(df_filtered) == 0:
        st.warning("Aucune donn√©e pour l'analyse des relations.")
        return
    
    # 1. Nuage de points avec potentiel destructeur
    st.markdown("#### üéØ Nuage de points avec potentiel destructeur")
    
    fig, ax = plt.subplots(figsize=(12, 8))
    
    scatter = ax.scatter(df_filtered['Profondeur'], df_filtered['Magnitude'], 
                        c=df_filtered['Potentiel_Destructeur'], cmap='YlOrRd', 
                        alpha=0.7, s=60, edgecolors='black', linewidth=0.5)
    
    plt.colorbar(scatter, label='Potentiel destructeur')
    
    # Ajouter une r√©gression lin√©aire
    if len(df_filtered) > 2:
        slope, intercept, r_value, p_value, std_err = stats.linregress(
            df_filtered['Profondeur'], df_filtered['Magnitude'])
        
        x_line = np.array([df_filtered['Profondeur'].min(), df_filtered['Profondeur'].max()])
        y_line = intercept + slope * x_line
        
        ax.plot(x_line, y_line, 'b--', linewidth=2,
               label=f'R√©gression: y={slope:.4f}x+{intercept:.2f} (r¬≤={r_value**2:.3f})')
        
        # Analyse statistique
        significance = "significative" if p_value < 0.05 else "non significative"
        direction = "positive" if slope > 0 else "n√©gative"
        
        st.markdown(f"""
        <div class="stats-container">
            <h4>üìä Analyse de corr√©lation</h4>
            <p><strong>Coefficient de corr√©lation (r) :</strong> {r_value:.3f}</p>
            <p><strong>Coefficient de d√©termination (r¬≤) :</strong> {r_value**2:.3f}</p>
            <p><strong>p-value :</strong> {p_value:.4f}</p>
            <p><strong>Conclusion :</strong> Corr√©lation {direction} {significance}</p>
        </div>
        """, unsafe_allow_html=True)
    
    ax.set_title('Relation entre magnitude et profondeur\n(couleur = potentiel destructeur)')
    ax.set_xlabel('Profondeur (km)')
    ax.set_ylabel('Magnitude')
    ax.legend()
    ax.grid(alpha=0.3)
    
    plt.tight_layout()
    st.pyplot(fig)
    plt.close()

def analyser_potentiel_destructeur(df_filtered):
    """Analyser le potentiel destructeur"""
    
    st.subheader("‚ö†Ô∏è Analyse du Potentiel Destructeur")
    
    if len(df_filtered) == 0:
        st.warning("Aucune donn√©e pour l'analyse du potentiel destructeur.")
        return
    
    # 1. Distribution du potentiel destructeur
    st.markdown("#### üìä Distribution du potentiel destructeur")
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
    
    # Histogramme
    ax1.hist(df_filtered['Potentiel_Destructeur'], bins=30, alpha=0.7, 
             color='orange', edgecolor='black', density=True)
    
    ax1.axvline(df_filtered['Potentiel_Destructeur'].mean(), color='red', linestyle='--', 
               label=f'Moyenne: {df_filtered["Potentiel_Destructeur"].mean():.2f}')
    ax1.axvline(df_filtered['Potentiel_Destructeur'].median(), color='green', linestyle='--', 
               label=f'M√©diane: {df_filtered["Potentiel_Destructeur"].median():.2f}')
    
    ax1.set_title('Distribution du potentiel destructeur')
    ax1.set_xlabel('Potentiel destructeur')
    ax1.set_ylabel('Densit√©')
    ax1.legend()
    ax1.grid(alpha=0.3)
    
    # Distribution par cat√©gorie
    order = ['Tr√®s faible', 'Faible', 'Mod√©r√©', '√âlev√©', 'Tr√®s √©lev√©']
    order = [cat for cat in order if cat in df_filtered['Potentiel_Categorie'].unique()]
    
    potentiel_counts = df_filtered['Potentiel_Categorie'].value_counts().reindex(order)
    colors = plt.cm.Reds(np.linspace(0.3, 0.9, len(order)))
    
    bars = ax2.bar(order, potentiel_counts.values, color=colors, alpha=0.8, edgecolor='black')
    
    total = len(df_filtered)
    for i, (bar, count) in enumerate(zip(bars, potentiel_counts.values)):
        percentage = count / total * 100
        ax2.text(bar.get_x() + bar.get_width()/2., bar.get_height(),
               f'{count}\n({percentage:.1f}%)', ha='center', va='bottom', fontweight='bold')
    
    ax2.set_title('Nombre de s√©ismes par cat√©gorie de potentiel')
    ax2.set_xlabel('Cat√©gorie de potentiel destructeur')
    ax2.set_ylabel('Nombre de s√©ismes')
    ax2.tick_params(axis='x', rotation=45)
    ax2.grid(alpha=0.3)
    
    plt.tight_layout()
    st.pyplot(fig)
    plt.close()
    
    # 2. Analyse des s√©ismes les plus dangereux
    st.markdown("#### üö® S√©ismes √† fort potentiel destructeur")
    
    # Identifier les s√©ismes les plus dangereux (top 10%)
    seuil_danger = df_filtered['Potentiel_Destructeur'].quantile(0.9)
    seismes_dangereux = df_filtered[df_filtered['Potentiel_Destructeur'] >= seuil_danger]
    
    if len(seismes_dangereux) > 0:
        st.markdown(f"""
        <div class="danger-alert">
            <h4>‚ö†Ô∏è S√©ismes √† surveiller</h4>
            <p><strong>{len(seismes_dangereux)} s√©ismes</strong> ont un potentiel destructeur √©lev√© (‚â• {seuil_danger:.1f})</p>
            <p>Ces s√©ismes repr√©sentent <strong>{len(seismes_dangereux)/len(df_filtered)*100:.1f}%</strong> de l'ensemble</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Tableau des s√©ismes les plus dangereux
        if 'Date' in seismes_dangereux.columns:
            top_dangerous = seismes_dangereux.nlargest(10, 'Potentiel_Destructeur')[
                ['Date', 'Magnitude', 'Profondeur', 'Potentiel_Destructeur']
            ].copy()
            
            top_dangerous['Date'] = pd.to_datetime(top_dangerous['Date']).dt.strftime('%d/%m/%Y %H:%M')
            top_dangerous.columns = ['Date', 'Magnitude', 'Profondeur (km)', 'Potentiel']
            
            st.dataframe(top_dangerous, hide_index=True, use_container_width=True)

def analyser_energie(df_filtered):
    """Analyser l'√©nergie lib√©r√©e par les s√©ismes"""
    
    st.subheader("‚ö° Analyse de l'√ânergie Lib√©r√©e")
    
    if len(df_filtered) == 0:
        st.warning("Aucune donn√©e pour l'analyse de l'√©nergie.")
        return
    
    # 1. Distribution de l'√©nergie
    st.markdown("#### üìä Distribution de l'√©nergie lib√©r√©e")
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
    
    # Distribution normale
    ax1.hist(df_filtered['Energie'], bins=30, alpha=0.7, color='gold', edgecolor='black')
    ax1.set_title('Distribution de l\'√©nergie')
    ax1.set_xlabel('√ânergie (Joules)')
    ax1.set_ylabel('Nombre de s√©ismes')
    ax1.ticklabel_format(style='scientific', axis='x', scilimits=(0,0))
    ax1.grid(alpha=0.3)
    
    # Distribution logarithmique
    log_energie = np.log10(df_filtered['Energie'])
    ax2.hist(log_energie, bins=30, alpha=0.7, color='orange', edgecolor='black')
    ax2.set_title('Distribution de l\'√©nergie (√©chelle log)')
    ax2.set_xlabel('√ânergie (log‚ÇÅ‚ÇÄ Joules)')
    ax2.set_ylabel('Nombre de s√©ismes')
    ax2.grid(alpha=0.3)
    
    plt.tight_layout()
    st.pyplot(fig)
    plt.close()
    
    # 2. √ânergie cumul√©e dans le temps
    st.markdown("#### üìà √âvolution de l'√©nergie cumul√©e")
    
    if 'Date' in df_filtered.columns:
        df_sorted = df_filtered.sort_values('Date')
        energie_cumulee = df_sorted['Energie'].cumsum()
        
        fig, ax = plt.subplots(figsize=(14, 6))
        ax.plot(df_sorted['Date'], energie_cumulee, linewidth=2, color='red')
        ax.set_title('√ânergie sismique cumul√©e au fil du temps')
        ax.set_xlabel('Date')
        ax.set_ylabel('√ânergie cumul√©e (Joules)')
        ax.set_yscale('log')
        ax.grid(alpha=0.3)
        
        # Ajouter des informations sur les pics d'√©nergie
        max_daily_energy = df_sorted.groupby(df_sorted['Date'].dt.date)['Energie'].sum()
        top_energy_day = max_daily_energy.idxmax()
        max_energy_value = max_daily_energy.max()
        
        st.markdown(f"""
        <div class="energy-metric">
            <h4>‚ö° Pic d'√©nergie</h4>
            <p><strong>Jour le plus √©nerg√©tique :</strong> {top_energy_day}</p>
            <p><strong>√ânergie lib√©r√©e :</strong> {max_energy_value:.2e} Joules</p>
        </div>
        """, unsafe_allow_html=True)
        
        plt.tight_layout()
        st.pyplot(fig)
        plt.close()
    
    # 3. R√©partition de l'√©nergie par cat√©gorie de magnitude
    st.markdown("#### üè∑Ô∏è R√©partition de l'√©nergie par cat√©gorie")
    
    order = ['Micro', 'Faible', 'L√©ger', 'Mod√©r√©', 'Fort', 'Majeur', 'Grand']
    order = [cat for cat in order if cat in df_filtered['Magnitude_Categorie'].unique()]
    
    # Calculer l'√©nergie totale par cat√©gorie
    energie_par_categorie = df_filtered.groupby('Magnitude_Categorie')['Energie'].sum().reindex(order)
    
    fig, ax = plt.subplots(figsize=(12, 6))
    colors = plt.cm.YlOrRd(np.linspace(0.3, 0.9, len(order)))
    bars = ax.bar(order, energie_par_categorie.values, color=colors, alpha=0.8, edgecolor='black')
    
    ax.set_title('√ânergie totale lib√©r√©e par cat√©gorie de magnitude')
    ax.set_xlabel('Cat√©gorie de magnitude')
    ax.set_ylabel('√ânergie totale (Joules)')
    ax.set_yscale('log')
    ax.tick_params(axis='x', rotation=45)
    ax.grid(alpha=0.3)
    
    # Ajouter les pourcentages
    total_energy = energie_par_categorie.sum()
    for i, (bar, energy) in enumerate(zip(bars, energie_par_categorie.values)):
        percentage = energy / total_energy * 100
        ax.text(bar.get_x() + bar.get_width()/2., bar.get_height() * 1.1,
               f'{percentage:.1f}%', ha='center', va='bottom', fontweight='bold')
    
    plt.tight_layout()
    st.pyplot(fig)
    plt.close()
    
    # 4. Relation √©nergie-magnitude (loi de Gutenberg-Richter)
    st.markdown("#### üìè Relation √©nergie-magnitude")
    
    fig, ax = plt.subplots(figsize=(12, 6))
    
    scatter = ax.scatter(df_filtered['Magnitude'], np.log10(df_filtered['Energie']), 
                        alpha=0.6, c=df_filtered['Profondeur'], cmap='viridis', s=50)
    
    plt.colorbar(scatter, label='Profondeur (km)')
    
    # Ajouter la relation th√©orique E = 10^(1.5*M+4.8)
    mag_theory = np.linspace(df_filtered['Magnitude'].min(), df_filtered['Magnitude'].max(), 100)
    log_energy_theory = 1.5 * mag_theory + 4.8
    
    ax.plot(mag_theory, log_energy_theory, 'r--', linewidth=2, 
           label='Relation th√©orique: log‚ÇÅ‚ÇÄ(E) = 1.5M + 4.8')
    
    ax.set_title('Relation entre magnitude et √©nergie lib√©r√©e')
    ax.set_xlabel('Magnitude')
    ax.set_ylabel('√ânergie (log‚ÇÅ‚ÇÄ Joules)')
    ax.legend()
    ax.grid(alpha=0.3)
    
    plt.tight_layout()
    st.pyplot(fig)
    plt.close()
    
    # 5. Statistiques √©nerg√©tiques
    st.markdown("#### üìä Statistiques √©nerg√©tiques")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="energy-metric">
            <h4>‚ö° M√©triques globales</h4>
        </div>
        """, unsafe_allow_html=True)
        
        total_energie = df_filtered['Energie'].sum()
        moyenne_energie = df_filtered['Energie'].mean()
        max_energie = df_filtered['Energie'].max()
        
        energy_stats = {
            "M√©trique": ["√ânergie totale", "√ânergie moyenne", "√ânergie maximale", "√ânergie m√©diane"],
            "Valeur": [
                f"{total_energie:.2e} J",
                f"{moyenne_energie:.2e} J",
                f"{max_energie:.2e} J",
                f"{df_filtered['Energie'].median():.2e} J"
            ]
        }
        st.dataframe(pd.DataFrame(energy_stats), hide_index=True)
    
    with col2:
        st.markdown("""
        <div class="energy-metric">
            <h4>üè∑Ô∏è Contribution par cat√©gorie</h4>
        </div>
        """, unsafe_allow_html=True)
        
        energy_contribution = []
        for category in order:
            if category in df_filtered['Magnitude_Categorie'].unique():
                cat_energy = df_filtered[df_filtered['Magnitude_Categorie'] == category]['Energie'].sum()
                percentage = cat_energy / total_energie * 100
                count = len(df_filtered[df_filtered['Magnitude_Categorie'] == category])
                
                energy_contribution.append({
                    "Cat√©gorie": category,
                    "√ânergie": f"{cat_energy:.2e} J",
                    "Contribution": f"{percentage:.1f}%",
                    "Nombre": count
                })
        
        if energy_contribution:
            st.dataframe(pd.DataFrame(energy_contribution), hide_index=True)

# Fonction principale qui peut √™tre appel√©e depuis app.py
def main():
    """Fonction principale √† appeler depuis l'application principale"""
    show_analyse_caracteristiques()

if __name__ == "__main__":
    main()